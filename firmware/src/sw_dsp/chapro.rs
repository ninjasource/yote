/* automatically generated by rust-bindgen 0.69.2 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const NPTR: u32 = 64;
pub const NVAR: u32 = 32;
pub const M_PI: f64 = 3.141592653589793;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const DSL_MXCH: u32 = 32;
pub const CLS_MXCH: u32 = 32;
pub const _size: u32 = 0;
pub const _ivar: u32 = 1;
pub const _dvar: u32 = 2;
pub const _cc: u32 = 3;
pub const _offset: u32 = 4;
pub const _ffhh: u32 = 5;
pub const _ffxx: u32 = 6;
pub const _ffyy: u32 = 7;
pub const _ffzz: u32 = 8;
pub const _bb: u32 = 5;
pub const _aa: u32 = 6;
pub const _zz: u32 = 7;
pub const _yd: u32 = 8;
pub const _xx: u32 = 9;
pub const _dd: u32 = 10;
pub const _dn: u32 = 5;
pub const _ydr: u32 = 6;
pub const _br: u32 = 7;
pub const _ar: u32 = 8;
pub const _zr: u32 = 9;
pub const _zg: u32 = 10;
pub const _gctk: u32 = 11;
pub const _gccr: u32 = 12;
pub const _gctkgn: u32 = 13;
pub const _gcbolt: u32 = 14;
pub const _gcppk: u32 = 15;
pub const _xpk: u32 = 16;
pub const _ppk: u32 = 17;
pub const _dsm: u32 = 11;
pub const _dso: u32 = 12;
pub const _c1: u32 = 13;
pub const _c2: u32 = 14;
pub const _fc: u32 = 15;
pub const _bw: u32 = 16;
pub const _Lcs: u32 = 17;
pub const _Lcm: u32 = 18;
pub const _Lce: u32 = 19;
pub const _Lmx: u32 = 20;
pub const _Gcs: u32 = 21;
pub const _Gcm: u32 = 22;
pub const _Gce: u32 = 23;
pub const _Gmx: u32 = 24;
pub const _Gmn: u32 = 25;
pub const _Lfb: u32 = 26;
pub const _Gsup: u32 = 27;
pub const _Gpre: u32 = 28;
pub const _gsup: u32 = 29;
pub const _ginc: u32 = 30;
pub const _zdr: u32 = 31;
pub const _rng0: u32 = 32;
pub const _rng1: u32 = 33;
pub const _rng2: u32 = 34;
pub const _rng3: u32 = 35;
pub const _efbp: u32 = 36;
pub const _sfbp: u32 = 37;
pub const _wfrp: u32 = 38;
pub const _ffrp: u32 = 39;
pub const _qm: u32 = 40;
pub const _iqmp: u32 = 41;
pub const _nfc_mm: u32 = 42;
pub const _nfc_ww: u32 = 43;
pub const _nfc_xx: u32 = 44;
pub const _nfc_XX: u32 = 45;
pub const _nfc_yy: u32 = 46;
pub const _nfc_YY: u32 = 47;
pub const _nfc_g1: u32 = 48;
pub const _nfc_g2: u32 = 49;
pub const _sha_mm: u32 = 42;
pub const _sha_ww: u32 = 43;
pub const _sha_xx: u32 = 44;
pub const _sha_XX: u32 = 45;
pub const _sha_yy: u32 = 46;
pub const _sha_YY: u32 = 47;
pub const _sha_g1: u32 = 48;
pub const _sha_g2: u32 = 49;
pub const _sha_SS: u32 = 50;
pub const _sha_AA: u32 = 51;
pub const _sha_II: u32 = 52;
pub const _sha_JJ: u32 = 53;
pub const _cs: u32 = 0;
pub const _nc: u32 = 1;
pub const _op: u32 = 2;
pub const _nn: u32 = 3;
pub const _nw: u32 = 4;
pub const _ns: u32 = 2;
pub const _cm: u32 = 3;
pub const _ds: u32 = 5;
pub const _rsz: u32 = 6;
pub const _afl: u32 = 7;
pub const _fbl: u32 = 8;
pub const _nqm: u32 = 9;
pub const _wfl: u32 = 10;
pub const _pfl: u32 = 11;
pub const _mxl: u32 = 12;
pub const _in1: u32 = 13;
pub const _in2: u32 = 14;
pub const _rhd: u32 = 15;
pub const _hdel: u32 = 16;
pub const _pup: u32 = 17;
pub const _puc: u32 = 18;
pub const _rtl: u32 = 19;
pub const _nfc_nw: u32 = 20;
pub const _nfc_nm: u32 = 21;
pub const _nfc_wt: u32 = 22;
pub const _nfc_ncs: u32 = 23;
pub const _nfc_ics: u32 = 24;
pub const _sha_nw: u32 = 20;
pub const _sha_nm: u32 = 21;
pub const _sha_wt: u32 = 22;
pub const _sha_ncs: u32 = 23;
pub const _sha_ics: u32 = 24;
pub const _sha_xr: u32 = 25;
pub const _sha_hbw: u32 = 26;
pub const _fs: u32 = 0;
pub const _alfa: u32 = 1;
pub const _beta: u32 = 2;
pub const _mxdb: u32 = 3;
pub const _tkgn: u32 = 4;
pub const _tk: u32 = 5;
pub const _cr: u32 = 6;
pub const _bolt: u32 = 7;
pub const _gcalfa: u32 = 8;
pub const _gcbeta: u32 = 9;
pub const _lrpk: u32 = 1;
pub const _mu: u32 = 10;
pub const _rho: u32 = 11;
pub const _eps: u32 = 12;
pub const _alf: u32 = 13;
pub const _fbm: u32 = 15;
pub const _pwr: u32 = 16;
pub const _sha_g0: u32 = 17;
pub const _sha_a1: u32 = 18;
pub const _sha_a2: u32 = 19;
pub const _sha_a3: u32 = 20;
pub const _sha_gg: u32 = 21;
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::core::mem::MaybeUninit<__fsid_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type CHA_DATA = u32;
pub type CHA_PTR = *mut *mut ::core::ffi::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CHA_STA {
    pub arsiz: i32,
    pub ptsiz: i32,
    pub cp: *mut *mut ::core::ffi::c_void,
    pub data: *mut ::core::ffi::c_void,
    pub sr: f64,
    pub cs: i32,
    pub type_: i32,
    pub entry: i32,
    pub rprt: *mut ::core::ffi::c_void,
    pub proc_: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_CHA_STA() {
    const UNINIT: ::core::mem::MaybeUninit<CHA_STA> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CHA_STA>(),
        64usize,
        concat!("Size of: ", stringify!(CHA_STA))
    );
    assert_eq!(
        ::core::mem::align_of::<CHA_STA>(),
        8usize,
        concat!("Alignment of ", stringify!(CHA_STA))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).arsiz) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_STA),
            "::",
            stringify!(arsiz)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ptsiz) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_STA),
            "::",
            stringify!(ptsiz)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_STA),
            "::",
            stringify!(cp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_STA),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_STA),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_STA),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_STA),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).entry) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_STA),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rprt) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_STA),
            "::",
            stringify!(rprt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).proc_) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_STA),
            "::",
            stringify!(proc_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CHA_DSL {
    pub attack: f64,
    pub release: f64,
    pub maxdB: f64,
    pub ear: i32,
    pub nchannel: i32,
    pub cross_freq: [f64; 32usize],
    pub tkgain: [f64; 32usize],
    pub cr: [f64; 32usize],
    pub tk: [f64; 32usize],
    pub bolt: [f64; 32usize],
}
#[test]
fn bindgen_test_layout_CHA_DSL() {
    const UNINIT: ::core::mem::MaybeUninit<CHA_DSL> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CHA_DSL>(),
        1312usize,
        concat!("Size of: ", stringify!(CHA_DSL))
    );
    assert_eq!(
        ::core::mem::align_of::<CHA_DSL>(),
        8usize,
        concat!("Alignment of ", stringify!(CHA_DSL))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).attack) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_DSL),
            "::",
            stringify!(attack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_DSL),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxdB) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_DSL),
            "::",
            stringify!(maxdB)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ear) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_DSL),
            "::",
            stringify!(ear)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nchannel) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_DSL),
            "::",
            stringify!(nchannel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cross_freq) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_DSL),
            "::",
            stringify!(cross_freq)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tkgain) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_DSL),
            "::",
            stringify!(tkgain)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cr) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_DSL),
            "::",
            stringify!(cr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tk) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_DSL),
            "::",
            stringify!(tk)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bolt) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_DSL),
            "::",
            stringify!(bolt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CHA_WDRC {
    pub attack: f64,
    pub release: f64,
    pub fs: f64,
    pub maxdB: f64,
    pub tkgain: f64,
    pub tk: f64,
    pub cr: f64,
    pub bolt: f64,
    pub td: f64,
    pub nz: i32,
    pub nw: i32,
    pub wt: i32,
}
#[test]
fn bindgen_test_layout_CHA_WDRC() {
    const UNINIT: ::core::mem::MaybeUninit<CHA_WDRC> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CHA_WDRC>(),
        88usize,
        concat!("Size of: ", stringify!(CHA_WDRC))
    );
    assert_eq!(
        ::core::mem::align_of::<CHA_WDRC>(),
        8usize,
        concat!("Alignment of ", stringify!(CHA_WDRC))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).attack) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_WDRC),
            "::",
            stringify!(attack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_WDRC),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_WDRC),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).maxdB) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_WDRC),
            "::",
            stringify!(maxdB)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tkgain) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_WDRC),
            "::",
            stringify!(tkgain)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tk) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_WDRC),
            "::",
            stringify!(tk)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_WDRC),
            "::",
            stringify!(cr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bolt) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_WDRC),
            "::",
            stringify!(bolt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).td) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_WDRC),
            "::",
            stringify!(td)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nz) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_WDRC),
            "::",
            stringify!(nz)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nw) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_WDRC),
            "::",
            stringify!(nw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_WDRC),
            "::",
            stringify!(wt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CHA_CLS {
    pub cm: i32,
    pub nc: i32,
    pub fc: [f64; 32usize],
    pub bw: [f64; 32usize],
    pub Gcs: [f64; 32usize],
    pub Gcm: [f64; 32usize],
    pub Gce: [f64; 32usize],
    pub Gmx: [f64; 32usize],
    pub Lcs: [f64; 32usize],
    pub Lcm: [f64; 32usize],
    pub Lce: [f64; 32usize],
    pub Lmx: [f64; 32usize],
}
#[test]
fn bindgen_test_layout_CHA_CLS() {
    const UNINIT: ::core::mem::MaybeUninit<CHA_CLS> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CHA_CLS>(),
        2568usize,
        concat!("Size of: ", stringify!(CHA_CLS))
    );
    assert_eq!(
        ::core::mem::align_of::<CHA_CLS>(),
        8usize,
        concat!("Alignment of ", stringify!(CHA_CLS))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_CLS),
            "::",
            stringify!(cm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_CLS),
            "::",
            stringify!(nc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_CLS),
            "::",
            stringify!(fc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bw) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_CLS),
            "::",
            stringify!(bw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Gcs) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_CLS),
            "::",
            stringify!(Gcs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Gcm) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_CLS),
            "::",
            stringify!(Gcm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Gce) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_CLS),
            "::",
            stringify!(Gce)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Gmx) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_CLS),
            "::",
            stringify!(Gmx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lcs) as usize - ptr as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_CLS),
            "::",
            stringify!(Lcs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lcm) as usize - ptr as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_CLS),
            "::",
            stringify!(Lcm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lce) as usize - ptr as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_CLS),
            "::",
            stringify!(Lce)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lmx) as usize - ptr as usize },
        2312usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_CLS),
            "::",
            stringify!(Lmx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CHA_ICMP {
    pub sr: f64,
    pub nz: i32,
    pub nw: i32,
    pub wt: i32,
    pub fd: f64,
    pub gd: f64,
    pub gn: f64,
    pub nm: i32,
    pub po: i32,
    pub no: i32,
}
#[test]
fn bindgen_test_layout_CHA_ICMP() {
    const UNINIT: ::core::mem::MaybeUninit<CHA_ICMP> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CHA_ICMP>(),
        64usize,
        concat!("Size of: ", stringify!(CHA_ICMP))
    );
    assert_eq!(
        ::core::mem::align_of::<CHA_ICMP>(),
        8usize,
        concat!("Alignment of ", stringify!(CHA_ICMP))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_ICMP),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nz) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_ICMP),
            "::",
            stringify!(nz)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_ICMP),
            "::",
            stringify!(nw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_ICMP),
            "::",
            stringify!(wt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_ICMP),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gd) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_ICMP),
            "::",
            stringify!(gd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gn) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_ICMP),
            "::",
            stringify!(gn)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nm) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_ICMP),
            "::",
            stringify!(nm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).po) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_ICMP),
            "::",
            stringify!(po)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_ICMP),
            "::",
            stringify!(no)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CHA_AFC {
    pub fbg: f64,
    pub rho: f64,
    pub eps: f64,
    pub mu: f64,
    pub alf: f64,
    pub afl: i32,
    pub wfl: i32,
    pub pfl: i32,
    pub fbl: i32,
    pub hdel: i32,
    pub pup: i32,
    pub efbp: *mut f32,
    pub sfbp: *mut f32,
    pub wfrp: *mut f32,
    pub ffrp: *mut f32,
    pub qm: *mut f32,
    pub iqmp: *mut i32,
    pub nqm: i32,
    pub iqm: i32,
    pub sqm: i32,
    pub pcp: CHA_PTR,
}
#[test]
fn bindgen_test_layout_CHA_AFC() {
    const UNINIT: ::core::mem::MaybeUninit<CHA_AFC> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CHA_AFC>(),
        136usize,
        concat!("Size of: ", stringify!(CHA_AFC))
    );
    assert_eq!(
        ::core::mem::align_of::<CHA_AFC>(),
        8usize,
        concat!("Alignment of ", stringify!(CHA_AFC))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fbg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(fbg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rho) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(rho)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).eps) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(eps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mu) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(mu)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).alf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(alf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).afl) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(afl)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wfl) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(wfl)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pfl) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(pfl)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fbl) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(fbl)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdel) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(hdel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pup) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(pup)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).efbp) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(efbp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sfbp) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(sfbp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wfrp) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(wfrp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ffrp) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(ffrp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).qm) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(qm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).iqmp) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(iqmp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nqm) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(nqm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).iqm) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(iqm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sqm) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(sqm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pcp) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_AFC),
            "::",
            stringify!(pcp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CHA_NFC {
    pub cs: i32,
    pub nw: i32,
    pub wt: i32,
    pub nm: i32,
    pub sr: f64,
    pub lbf: f64,
    pub ubf: f64,
    pub mm: *mut i32,
    pub g1: *mut f32,
    pub g2: *mut f32,
}
#[test]
fn bindgen_test_layout_CHA_NFC() {
    const UNINIT: ::core::mem::MaybeUninit<CHA_NFC> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CHA_NFC>(),
        64usize,
        concat!("Size of: ", stringify!(CHA_NFC))
    );
    assert_eq!(
        ::core::mem::align_of::<CHA_NFC>(),
        8usize,
        concat!("Alignment of ", stringify!(CHA_NFC))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_NFC),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nw) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_NFC),
            "::",
            stringify!(nw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_NFC),
            "::",
            stringify!(wt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nm) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_NFC),
            "::",
            stringify!(nm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_NFC),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lbf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_NFC),
            "::",
            stringify!(lbf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ubf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_NFC),
            "::",
            stringify!(ubf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mm) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_NFC),
            "::",
            stringify!(mm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).g1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_NFC),
            "::",
            stringify!(g1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).g2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_NFC),
            "::",
            stringify!(g2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CHA_SHA {
    pub cs: i32,
    pub nw: i32,
    pub wt: i32,
    pub nm: i32,
    pub xr: i32,
    pub hbw: i32,
    pub sr: f64,
    pub lbf: f64,
    pub ubf: f64,
    pub ref_: f64,
    pub Gmax: f64,
    pub Lmax: f64,
    pub Lckp: f64,
    pub Lekp: f64,
    pub mm: *mut i32,
    pub g1: *mut f32,
    pub g2: *mut f32,
    pub supp: *mut f32,
}
#[test]
fn bindgen_test_layout_CHA_SHA() {
    const UNINIT: ::core::mem::MaybeUninit<CHA_SHA> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CHA_SHA>(),
        120usize,
        concat!("Size of: ", stringify!(CHA_SHA))
    );
    assert_eq!(
        ::core::mem::align_of::<CHA_SHA>(),
        8usize,
        concat!("Alignment of ", stringify!(CHA_SHA))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nw) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(nw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(wt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nm) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(nm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(xr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hbw) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(hbw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lbf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(lbf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ubf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(ubf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Gmax) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(Gmax)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lmax) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(Lmax)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lckp) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(Lckp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Lekp) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(Lekp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mm) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(mm)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).g1) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(g1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).g2) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(g2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).supp) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CHA_SHA),
            "::",
            stringify!(supp)
        )
    );
}
extern "C" {
    pub fn cha_allocate(
        arg1: CHA_PTR,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
        arg4: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn cha_cleanup(arg1: CHA_PTR);
}
extern "C" {
    pub fn cha_chunk_size(arg1: CHA_PTR, arg2: ::core::ffi::c_int);
}
extern "C" {
    pub fn cha_data_gen(arg1: CHA_PTR, arg2: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_data_save(arg1: CHA_PTR, arg2: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_data_load(arg1: CHA_PTR, arg2: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_state_save(arg1: CHA_PTR, arg2: *mut CHA_STA) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_state_copy(arg1: *mut CHA_STA, arg2: *mut CHA_STA) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_state_free(arg1: *mut CHA_STA) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_fft(arg1: *mut f32, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_ifft(arg1: *mut f32, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_fft_cr(arg1: *mut f32, arg2: ::core::ffi::c_int);
}
extern "C" {
    pub fn cha_fft_rc(arg1: *mut f32, arg2: ::core::ffi::c_int);
}
extern "C" {
    pub fn cha_prepare(arg1: CHA_PTR);
}
extern "C" {
    pub fn cha_scale(arg1: *mut f32, arg2: ::core::ffi::c_int, arg3: f32);
}
extern "C" {
    pub fn cha_version() -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn cha_firfb_prepare(
        arg1: CHA_PTR,
        arg2: *mut f64,
        arg3: ::core::ffi::c_int,
        arg4: f64,
        arg5: ::core::ffi::c_int,
        arg6: ::core::ffi::c_int,
        arg7: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_firfb_analyze(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn cha_firfb_synthesize(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn cha_iirfb_design(
        arg1: *mut f32,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut ::core::ffi::c_int,
        arg5: *mut f64,
        arg6: ::core::ffi::c_int,
        arg7: ::core::ffi::c_int,
        arg8: f64,
        arg9: f64,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_iirfb_prepare(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut ::core::ffi::c_int,
        arg6: ::core::ffi::c_int,
        arg7: ::core::ffi::c_int,
        arg8: f64,
        arg9: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_iirfb_analyze(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn cha_iirfb_synthesize(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn cha_cfirfb_prepare(
        arg1: CHA_PTR,
        arg2: *mut f64,
        arg3: ::core::ffi::c_int,
        arg4: f64,
        arg5: ::core::ffi::c_int,
        arg6: ::core::ffi::c_int,
        arg7: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_cfirfb_analyze(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn cha_cfirfb_synthesize(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn cha_ciirfb_design(
        arg1: *mut f32,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut ::core::ffi::c_int,
        arg5: ::core::ffi::c_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: f64,
        arg9: f64,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_ciirfb_prepare(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut ::core::ffi::c_int,
        arg6: ::core::ffi::c_int,
        arg7: ::core::ffi::c_int,
        arg8: f64,
        arg9: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_ciirfb_analyze(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn cha_ciirfb_synthesize(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn cha_dciirfb_prepare(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut ::core::ffi::c_int,
        arg6: ::core::ffi::c_int,
        arg7: ::core::ffi::c_int,
        arg8: f64,
        arg9: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_dciirfb_analyze(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn cha_dciirfb_synthesize(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn cha_agc_prepare(
        arg1: CHA_PTR,
        arg2: *mut CHA_DSL,
        arg3: *mut CHA_WDRC,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_agc_input(arg1: CHA_PTR, arg2: *mut f32, arg3: *mut f32, arg4: ::core::ffi::c_int);
}
extern "C" {
    pub fn cha_agc_channel(arg1: CHA_PTR, arg2: *mut f32, arg3: *mut f32, arg4: ::core::ffi::c_int);
}
extern "C" {
    pub fn cha_agc_output(arg1: CHA_PTR, arg2: *mut f32, arg3: *mut f32, arg4: ::core::ffi::c_int);
}
extern "C" {
    pub fn cha_icmp_prepare(
        arg1: CHA_PTR,
        arg2: *mut CHA_CLS,
        arg3: f64,
        arg4: f64,
        arg5: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_icmp_process(
        arg1: CHA_PTR,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn cha_afc_prepare(arg1: CHA_PTR, arg2: *mut CHA_AFC) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_afc_filters(arg1: CHA_PTR, arg2: *mut CHA_AFC) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_afc_input(arg1: CHA_PTR, arg2: *mut f32, arg3: *mut f32, arg4: ::core::ffi::c_int);
}
extern "C" {
    pub fn cha_afc_output(arg1: CHA_PTR, arg2: *mut f32, arg3: ::core::ffi::c_int);
}
extern "C" {
    pub fn cha_nfc_prepare(arg1: CHA_PTR, arg2: *mut CHA_NFC) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_nfc_process(arg1: CHA_PTR, arg2: *mut f32, arg3: *mut f32, arg4: ::core::ffi::c_int);
}
extern "C" {
    pub fn cha_sha_prepare(arg1: CHA_PTR, arg2: *mut CHA_SHA) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cha_sha_process(arg1: CHA_PTR, arg2: *mut f32, arg3: *mut f32, arg4: ::core::ffi::c_int);
}
